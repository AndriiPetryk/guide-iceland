# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Picture implements Node {
  id: ID!
  uniq: String!
  link: String!
  pic: String!
}


#
# Other Types
#

type AggregatePicture {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createPicture(data: PictureCreateInput!): Picture!
  updatePicture(data: PictureUpdateInput!, where: PictureWhereUniqueInput!): Picture
  deletePicture(where: PictureWhereUniqueInput!): Picture
  upsertPicture(where: PictureWhereUniqueInput!, create: PictureCreateInput!, update: PictureUpdateInput!): Picture!
  updateManyPictures(data: PictureUpdateInput!, where: PictureWhereInput!): BatchPayload!
  deleteManyPictures(where: PictureWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
A connection to a list of items.
"""
type PictureConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [PictureEdge]!
  aggregate: AggregatePicture!
}

input PictureCreateInput {
  uniq: String!
  link: String!
  pic: String!
}

"""
An edge in a connection.
"""
type PictureEdge {
  """
  The item at the end of the edge.
  """
  node: Picture!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PictureOrderByInput {
  id_ASC
  id_DESC
  uniq_ASC
  uniq_DESC
  link_ASC
  link_DESC
  pic_ASC
  pic_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PicturePreviousValues {
  id: ID!
  uniq: String!
  link: String!
  pic: String!
}

type PictureSubscriptionPayload {
  mutation: MutationType!
  node: Picture
  updatedFields: [String!]
  previousValues: PicturePreviousValues
}

input PictureSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PictureSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PictureSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PictureWhereInput
}

input PictureUpdateInput {
  uniq: String
  link: String
  pic: String
}

input PictureWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PictureWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PictureWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  uniq: String
  """
  All values that are not equal to given value.
  """
  uniq_not: String
  """
  All values that are contained in given list.
  """
  uniq_in: [String!]
  """
  All values that are not contained in given list.
  """
  uniq_not_in: [String!]
  """
  All values less than the given value.
  """
  uniq_lt: String
  """
  All values less than or equal the given value.
  """
  uniq_lte: String
  """
  All values greater than the given value.
  """
  uniq_gt: String
  """
  All values greater than or equal the given value.
  """
  uniq_gte: String
  """
  All values containing the given string.
  """
  uniq_contains: String
  """
  All values not containing the given string.
  """
  uniq_not_contains: String
  """
  All values starting with the given string.
  """
  uniq_starts_with: String
  """
  All values not starting with the given string.
  """
  uniq_not_starts_with: String
  """
  All values ending with the given string.
  """
  uniq_ends_with: String
  """
  All values not ending with the given string.
  """
  uniq_not_ends_with: String
  link: String
  """
  All values that are not equal to given value.
  """
  link_not: String
  """
  All values that are contained in given list.
  """
  link_in: [String!]
  """
  All values that are not contained in given list.
  """
  link_not_in: [String!]
  """
  All values less than the given value.
  """
  link_lt: String
  """
  All values less than or equal the given value.
  """
  link_lte: String
  """
  All values greater than the given value.
  """
  link_gt: String
  """
  All values greater than or equal the given value.
  """
  link_gte: String
  """
  All values containing the given string.
  """
  link_contains: String
  """
  All values not containing the given string.
  """
  link_not_contains: String
  """
  All values starting with the given string.
  """
  link_starts_with: String
  """
  All values not starting with the given string.
  """
  link_not_starts_with: String
  """
  All values ending with the given string.
  """
  link_ends_with: String
  """
  All values not ending with the given string.
  """
  link_not_ends_with: String
  pic: String
  """
  All values that are not equal to given value.
  """
  pic_not: String
  """
  All values that are contained in given list.
  """
  pic_in: [String!]
  """
  All values that are not contained in given list.
  """
  pic_not_in: [String!]
  """
  All values less than the given value.
  """
  pic_lt: String
  """
  All values less than or equal the given value.
  """
  pic_lte: String
  """
  All values greater than the given value.
  """
  pic_gt: String
  """
  All values greater than or equal the given value.
  """
  pic_gte: String
  """
  All values containing the given string.
  """
  pic_contains: String
  """
  All values not containing the given string.
  """
  pic_not_contains: String
  """
  All values starting with the given string.
  """
  pic_starts_with: String
  """
  All values not starting with the given string.
  """
  pic_not_starts_with: String
  """
  All values ending with the given string.
  """
  pic_ends_with: String
  """
  All values not ending with the given string.
  """
  pic_not_ends_with: String
}

input PictureWhereUniqueInput {
  id: ID
}

type Query {
  pictures(where: PictureWhereInput, orderBy: PictureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Picture]!
  picture(where: PictureWhereUniqueInput!): Picture
  picturesConnection(where: PictureWhereInput, orderBy: PictureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PictureConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  picture(where: PictureSubscriptionWhereInput): PictureSubscriptionPayload
}
